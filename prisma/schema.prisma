// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum DocumentState {
  SUCCESS
  FAILED
  PENDING
  PROCESSING
}

model Category {
  id        Int        @id @default(autoincrement()) @db.SmallInt
  key       String?    @db.VarChar(64)
  value     Int?       @db.SmallInt
  documents Document[]
}

model Tag {
  id        Int        @id @default(autoincrement()) @db.SmallInt
  key       String?    @db.VarChar(64)
  value     Int?       @db.SmallInt
  documents Document[]
}

model Document {
  id          String        @id @default(cuid()) @db.VarChar(128)
  title       String        @db.VarChar(128)
  description String        @db.VarChar(255)
  keywords    String[]      @db.VarChar(128)
  authors     String[]      @db.VarChar(128)
  categoryId  Int           @db.SmallInt
  category    Category      @relation(fields: [categoryId], references: [id])
  tags        Tag[]
  visiable    Boolean       @default(true)
  coverUrl    String?       @db.VarChar(255)
  viewCount   Int           @default(0)
  state       DocumentState @default(PENDING)
  createdAt   DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime      @updatedAt @db.Timestamptz(6)
}

model User {
  /// unique userId for the system
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(64)
  /// use age to show the right content
  age       Int      @db.SmallInt
  /// unique public userId for the system
  email     String   @unique @db.VarChar(128)
  avatarUrl String?  @db.VarChar(255)
  /// description for user
  bio       String?  @db.VarChar(255)
  /// document Ids that a user posted
  posts     String[] @db.VarChar(128)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
}
